import{o as s,c as n,a}from"./app.7e4be0c8.js";const t='{"title":"API","description":"","frontmatter":{"editLink":false},"headers":[{"level":2,"title":"Functions","slug":"functions"},{"level":3,"title":"add","slug":"add"},{"level":3,"title":"and","slug":"and"},{"level":3,"title":"append","slug":"append"},{"level":3,"title":"chunk","slug":"chunk"},{"level":3,"title":"dec","slug":"dec"},{"level":3,"title":"defaultTo","slug":"defaultto"},{"level":3,"title":"divide","slug":"divide"},{"level":3,"title":"endsWith","slug":"endswith"},{"level":3,"title":"entries","slug":"entries"},{"level":3,"title":"F","slug":"f"},{"level":3,"title":"first","slug":"first"},{"level":3,"title":"flattenDeep","slug":"flattendeep"},{"level":3,"title":"gt","slug":"gt"},{"level":3,"title":"gte","slug":"gte"},{"level":3,"title":"has","slug":"has"},{"level":3,"title":"hasPath","slug":"haspath"},{"level":3,"title":"head","slug":"head"},{"level":3,"title":"identity","slug":"identity"},{"level":3,"title":"ifElse","slug":"ifelse"},{"level":3,"title":"inc","slug":"inc"},{"level":3,"title":"isArray","slug":"isarray"},{"level":3,"title":"isBigint","slug":"isbigint"},{"level":3,"title":"isBoolean","slug":"isboolean"},{"level":3,"title":"isEmpty","slug":"isempty"},{"level":3,"title":"isFunction","slug":"isfunction"},{"level":3,"title":"isNaN","slug":"isnan"},{"level":3,"title":"isNil","slug":"isnil"},{"level":3,"title":"isNill","slug":"isnill"},{"level":3,"title":"isNull","slug":"isnull"},{"level":3,"title":"isNumber","slug":"isnumber"},{"level":3,"title":"isObject","slug":"isobject"},{"level":3,"title":"isPrimitive","slug":"isprimitive"},{"level":3,"title":"isString","slug":"isstring"},{"level":3,"title":"isSymbol","slug":"issymbol"},{"level":3,"title":"isUndefined","slug":"isundefined"},{"level":3,"title":"K","slug":"k"},{"level":3,"title":"keys","slug":"keys"},{"level":3,"title":"last","slug":"last"},{"level":3,"title":"length","slug":"length"},{"level":3,"title":"lowerCase","slug":"lowercase"},{"level":3,"title":"lt","slug":"lt"},{"level":3,"title":"lte","slug":"lte"},{"level":3,"title":"map","slug":"map"},{"level":3,"title":"multiply","slug":"multiply"},{"level":3,"title":"not","slug":"not"},{"level":3,"title":"or","slug":"or"},{"level":3,"title":"prepend","slug":"prepend"},{"level":3,"title":"product","slug":"product"},{"level":3,"title":"props","slug":"props"},{"level":3,"title":"replace","slug":"replace"},{"level":3,"title":"replaceAll","slug":"replaceall"},{"level":3,"title":"reverse","slug":"reverse"},{"level":3,"title":"startsWith","slug":"startswith"},{"level":3,"title":"subtract","slug":"subtract"},{"level":3,"title":"sum","slug":"sum"},{"level":3,"title":"T","slug":"t"},{"level":3,"title":"tail","slug":"tail"},{"level":3,"title":"trim","slug":"trim"},{"level":3,"title":"trimLeft","slug":"trimleft"},{"level":3,"title":"trimRight","slug":"trimright"},{"level":3,"title":"upperCase","slug":"uppercase"},{"level":3,"title":"values","slug":"values"},{"level":3,"title":"xor","slug":"xor"},{"level":2,"title":"Types","slug":"types"},{"level":3,"title":"AnyFn","slug":"anyfn"},{"level":3,"title":"Empty","slug":"empty"},{"level":3,"title":"Falsy","slug":"falsy"},{"level":3,"title":"First","slug":"first-2"},{"level":3,"title":"FlattenDeep","slug":"flattendeep-2"},{"level":3,"title":"Last","slug":"last-2"},{"level":3,"title":"Ord","slug":"ord"},{"level":3,"title":"Primitive","slug":"primitive"},{"level":3,"title":"Replace","slug":"replace-2"},{"level":3,"title":"ReplaceAll","slug":"replaceall-2"},{"level":3,"title":"Space","slug":"space"},{"level":3,"title":"Trim","slug":"trim-2"},{"level":3,"title":"TrimLeft","slug":"trimleft-2"},{"level":3,"title":"TrimRight","slug":"trimright-2"}],"relativePath":"api/1.6.0-beta.3/index.md","lastUpdated":1620866253296}',e={},p=a('<div class="tip custom-block"><p class="custom-block-title">Info</p><p>This page is automatically generated from source code comments, tests, etc. If there are any mistakes on this page, need to correct them. If you find any mistakes, please report them as an <a href="https://github.com/TomokiMiyauci/fonction/issues" target="_blank" rel="noopener noreferrer">issue</a>.</p></div><h1 id="api"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h1><p class="my-1">Version: <code>1.6.0-beta.3</code></p><h2 id="functions"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><h3 id="add"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#subtract">subtract</a>Â  <a href="#multiply">multiply</a>Â  <a href="#divide">divide</a>Â </p><p class="desc">Adds first argument and second argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>add<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input number</td></tr><tr><td><code>b</code></td><td>The second input number</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a + b</code></p></details><h4 id="example-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Basic</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n</code></pre></div><h4 id="example-2"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// 3n</span>\n</code></pre></div><h4 id="example-3"><a class="header-anchor" href="#example-3" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// Curry</span>\n<span class="token keyword">const</span> <span class="token function">plus2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token function">plus2</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// -1</span>\n</code></pre></div><hr><h3 id="and"><a class="header-anchor" href="#and" aria-hidden="true">#</a> and</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#or">or</a>Â  <a href="#xor">xor</a>Â </p><p class="desc">Returns true if both arguments are true; otherwise false.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>and<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input any value</td></tr><tr><td><code>b</code></td><td>The second input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>!!a &amp;&amp; !!bb</code></p></details><h4 id="example"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">and</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">and</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">and</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">and</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="append"><a class="header-anchor" href="#append" aria-hidden="true">#</a> append</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#prepend">prepend</a>Â  ðŸ”—Â </p><p class="desc">Returns a new list containing the contents of the given list, followed by the given value.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>append<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>The value to add to the end of the new list</td></tr><tr><td><code>list</code></td><td>The list of elements to add a new item to</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>[...list, val]</code></p></details><h4 id="example-4"><a class="header-anchor" href="#example-4" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;, &#39;Tom&#39;]</span>\n<span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;Tom&#39;]</span>\n<span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;, &#39;world&#39;, [&#39;Tom&#39;]]</span>\n</code></pre></div><hr><h3 id="chunk"><a class="header-anchor" href="#chunk" aria-hidden="true">#</a> chunk</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Return an array of elements split into groups the length of size.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>chunk<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>size<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> array<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token builtin">number</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token punctuation">[</span>\n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token punctuation">(</span>infer <span class="token constant">R</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>size</code></td><td>The length of each chunk</td></tr><tr><td><code>array</code></td><td>The array to process</td></tr></tbody></table><p><code class="returns">=&gt;</code> Returns the new array of chunks</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>If array can&#39;t be split evenly, the final chunk will be the remaining elements.</p></div><h4 id="example-1-2"><a class="header-anchor" href="#example-1-2" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Basic</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;a&#39;], [&#39;b&#39;], [&#39;c&#39;], [&#39;d&#39;]]</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], [&#39;d&#39;]]</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]]</span>\n</code></pre></div><h4 id="example-2-2"><a class="header-anchor" href="#example-2-2" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Illegal size</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n<span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div><hr><h3 id="dec"><a class="header-anchor" href="#dec" aria-hidden="true">#</a> dec</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#inc">inc</a>Â </p><p class="desc">Decrements its argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>dec<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>input <code>number</code> or <code>bigint</code></td></tr></tbody></table><p><code class="returns">=&gt;</code> Decremented <code>val</code></p></details><h4 id="example-5"><a class="header-anchor" href="#example-5" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">dec</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 99</span>\n<span class="token function">dec</span><span class="token punctuation">(</span><span class="token number">10n</span><span class="token punctuation">)</span> <span class="token comment">// 9n</span>\n</code></pre></div><hr><h3 id="defaultto"><a class="header-anchor" href="#defaultto" aria-hidden="true">#</a> defaultTo</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Returns the second argument if it is not <code>null</code>, <code>undefined</code> or <code>NaN</code>; otherwise the first argument is returned.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>defaultTo<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> IsNill<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> IsNumber<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td><code>a</code> will be returned instead of <code>default</code></td></tr></tbody></table><p><code class="returns">=&gt;</code> Returns a function that stores the default <code>a</code> value. The function accept <code>b</code> argument. if <code>b</code> is <code>null</code> , <code>undefined</code> or <code>NaN</code> , return <code>a</code> ; otherwise return <code>b</code></p></details><h4 id="example-6"><a class="header-anchor" href="#example-6" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token keyword">const</span> defaultVal <span class="token operator">=</span> <span class="token function">defaultTo</span><span class="token punctuation">(</span><span class="token string">&#39;anonymous&#39;</span><span class="token punctuation">)</span>\n<span class="token function">defaultVal</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// &#39;anonymous&#39;</span>\n<span class="token function">defaultVal</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &#39;anonymous&#39;</span>\n<span class="token function">defaultVal</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// &#39;anonymous&#39;</span>\n\n<span class="token function">defaultVal</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Tom&#39;</span>\n</code></pre></div><hr><h3 id="divide"><a class="header-anchor" href="#divide" aria-hidden="true">#</a> divide</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#add">add</a>Â  <a href="#subtract">subtract</a>Â  <a href="#multiply">multiply</a>Â </p><p class="desc">Divide its second argument from its first argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>divide<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">typeof</span> _<span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">typeof</span> _<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input number</td></tr><tr><td><code>b</code></td><td>The second input number</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a / b</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>Since division is not idempotent, there are two ways to curry.</p></div><h4 id="example-1-3"><a class="header-anchor" href="#example-1-3" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 0.1</span>\n</code></pre></div><h4 id="example-2-3"><a class="header-anchor" href="#example-2-3" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// 3n</span>\n</code></pre></div><h4 id="example-3-2"><a class="header-anchor" href="#example-3-2" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// First argument curry</span>\n<span class="token keyword">const</span> reciprocal <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token function">reciprocal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 0.25</span>\n</code></pre></div><h4 id="example-4-2"><a class="header-anchor" href="#example-4-2" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Second argument curry</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> _ <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fonction&#39;</span>\n<span class="token keyword">const</span> half <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token function">half</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>\n</code></pre></div><hr><h3 id="endswith"><a class="header-anchor" href="#endswith" aria-hidden="true">#</a> endsWith</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#startswith">startsWith</a>Â </p><p class="desc">Checks if a string ends with the provided substring.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>endsWith<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> target<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">U</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> StringWith<span class="token operator">&lt;</span><span class="token string">&quot;endsWith&quot;</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Search string</td></tr><tr><td><code>target</code></td><td>Target string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>target.endsWith(val)</code></p></details><h4 id="example-1-4"><a class="header-anchor" href="#example-1-4" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Basic</span>\n<span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;earth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-4"><a class="header-anchor" href="#example-2-4" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Curry</span>\n<span class="token keyword">const</span> endsWithHtml <span class="token operator">=</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span>\n<span class="token function">endsWithHtml</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><hr><h3 id="entries"><a class="header-anchor" href="#entries" aria-hidden="true">#</a> entries</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#keys">keys</a>Â  <a href="#values">values</a>Â </p><p><span class="tag beta">beta</span></p><p class="desc">Returns an array of key/values of the enumerable properties of an object.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></div><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>entries$<span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token operator">|</span> ArrayLike<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>Object</code> that contains the properties and methods</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Object.entries(val)</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The order of the output array is not guaranteed to be consistent across different JS platforms.</p></div><h4 id="example-7"><a class="header-anchor" href="#example-7" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;a&#39;, &#39;b&#39;]]</span>\n<span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;0&#39;, &#39;a&#39;], [&#39;1&#39;, &#39;b&#39;], [&#39;2&#39;, &#39;c&#39;]]</span>\n<span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div><hr><h3 id="f"><a class="header-anchor" href="#f" aria-hidden="true">#</a> F</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#t">T</a>Â </p><p class="desc">A function that always returns <code>false</code>. Any passed in parameters are ignored.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token constant">F</span><span class="token operator">:</span> AnyFn<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> false</p></details><h4 id="example-8"><a class="header-anchor" href="#example-8" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token constant">F</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="first"><a class="header-anchor" href="#first" aria-hidden="true">#</a> first</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#last">last</a>Â </p><p class="desc">Returns the first element of the given list or string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>first<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> First<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>String or any array object</td></tr></tbody></table><p><code class="returns">=&gt;</code> The first element of the <code>val</code></p></details><h4 id="example-1-5"><a class="header-anchor" href="#example-1-5" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;h&#39;</span>\n</code></pre></div><h4 id="example-2-5"><a class="header-anchor" href="#example-2-5" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Array</span>\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#39;one&#39;</span>\n</code></pre></div><hr><h3 id="flattendeep"><a class="header-anchor" href="#flattendeep" aria-hidden="true">#</a> flattenDeep</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Recursively flattens array.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>flattenDeep<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> FlattenDeep<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>The <code>array</code> to flatten</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.flat(Infinity)</code></p></details><h4 id="example-9"><a class="header-anchor" href="#example-9" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">flattenDeep</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">flattenDeep</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre></div><hr><h3 id="gt"><a class="header-anchor" href="#gt" aria-hidden="true">#</a> gt</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#gte">gte</a>Â  <a href="#lt">lt</a>Â  <a href="#lte">lte</a>Â </p><p class="desc">Returns <code>true</code> if the first argument is greater than the second; otherwise <code>false</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>gt<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ord</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input value</td></tr><tr><td><code>b</code></td><td>The second input value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a &gt; b</code></p></details><h4 id="example-1-6"><a class="header-anchor" href="#example-1-6" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-6"><a class="header-anchor" href="#example-2-6" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-3-3"><a class="header-anchor" href="#example-3-3" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-4-3"><a class="header-anchor" href="#example-4-3" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Boolean</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-5-2"><a class="header-anchor" href="#example-5-2" aria-hidden="true">#</a> Example 5</h4><div class="language-ts"><pre><code><span class="token comment">// Date</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1999/12/31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">gt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="gte"><a class="header-anchor" href="#gte" aria-hidden="true">#</a> gte</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#gt">gt</a>Â  <a href="#lt">lt</a>Â  <a href="#lte">lte</a>Â </p><p class="desc">Returns <code>true</code> if the first argument is greater than or equal to the second; otherwise <code>false</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>gte<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ord</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input value</td></tr><tr><td><code>b</code></td><td>The second input value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a &gt;= b</code></p></details><h4 id="example-1-7"><a class="header-anchor" href="#example-1-7" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-7"><a class="header-anchor" href="#example-2-7" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">3n</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-3-4"><a class="header-anchor" href="#example-3-4" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-4-4"><a class="header-anchor" href="#example-4-4" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Boolean</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-5-3"><a class="header-anchor" href="#example-5-3" aria-hidden="true">#</a> Example 5</h4><div class="language-ts"><pre><code><span class="token comment">// Date</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">gte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1999/12/31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="has"><a class="header-anchor" href="#has" aria-hidden="true">#</a> has</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#props">props</a>Â </p><p class="desc">Returns whether or not an object has an own property with the specified name.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>has<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> obj<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">boolean</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token builtin">never</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>props</code></td><td>The name of the property to check for</td></tr><tr><td><code>obj</code></td><td>The check object</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Object.prototype.hasOwnProperty</code></p></details><h4 id="example-1-8"><a class="header-anchor" href="#example-1-8" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Flat</span>\n<span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">has</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hi <span class="token operator">:</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-8"><a class="header-anchor" href="#example-2-8" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Nest</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token punctuation">{</span> world<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// true</span>\n\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hi<span class="token operator">:</span> <span class="token punctuation">{</span> John<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="haspath"><a class="header-anchor" href="#haspath" aria-hidden="true">#</a> hasPath</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#has">has</a>Â </p><p><span class="tag deprecated">deprecate</span></p><p class="desc">Returns whether or not a path exists in an object. Only the object&#39;s own properties are checked.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>This function will remove next major release.</p></div><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>hasPath<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token operator">:</span> Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>path</code></td><td>The path to use</td></tr><tr><td><code>obj</code></td><td>The object to check the path in</td></tr></tbody></table><p><code class="returns">=&gt;</code> Whether the path exists</p></details><h4 id="example-10"><a class="header-anchor" href="#example-10" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token punctuation">{</span> world<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">// true</span>\n\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hello<span class="token operator">:</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> hi<span class="token operator">:</span> <span class="token punctuation">{</span> John<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="head"><a class="header-anchor" href="#head" aria-hidden="true">#</a> head</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#tail">tail</a>Â </p><p class="desc">Returns all but the last element of the given list or string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>head<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>string or any array object</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.slice(0, -1)</code></p></details><h4 id="example-1-9"><a class="header-anchor" href="#example-1-9" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hell&#39;</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>\n</code></pre></div><h4 id="example-2-9"><a class="header-anchor" href="#example-2-9" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;]</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">head</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div><hr><h3 id="identity"><a class="header-anchor" href="#identity" aria-hidden="true">#</a> identity</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Return the parameter supplied to it.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>identity<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>The value to return</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val</code></p></details><h4 id="example-11"><a class="header-anchor" href="#example-11" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">identity</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n<span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// {}</span>\n</code></pre></div><hr><h3 id="ifelse"><a class="header-anchor" href="#ifelse" aria-hidden="true">#</a> ifElse</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p><span class="tag beta">beta</span></p><p class="desc">Creates a function that will process either the <code>onTrue</code> or the <code>onFalse</code> function depending upon the result of the condition predicate.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></div><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>ifElse<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">V</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">boolean</span></span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function-variable function">condition</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">,</span> onTrue<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span> onFalse<span class="token operator">:</span> <span class="token constant">F</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">F</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>condition</code></td><td>A predicate function</td></tr><tr><td><code>onTrue</code></td><td>Any value or A function to invoke when the <code>condition</code> evaluates to a truthy value</td></tr><tr><td><code>onFalse</code></td><td>Any value or A function to invoke when the <code>condition</code> evaluates to a falsy value</td></tr></tbody></table><p><code class="returns">=&gt;</code> A new function that will process either the <code>onTrue</code> or the <code>onFalse</code> function depending upon the result of the <code>condition</code> predicate</p></details><h4 id="example-12"><a class="header-anchor" href="#example-12" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">ifElse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;big&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;small&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// &#39;big&#39;</span>\n<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">ifElse</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token comment">// 12</span>\n<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>\n</code></pre></div><hr><h3 id="inc"><a class="header-anchor" href="#inc" aria-hidden="true">#</a> inc</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#dec">dec</a>Â </p><p class="desc">Increments its argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>inc<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input <code>number</code> or <code>bigint</code></td></tr></tbody></table><p><code class="returns">=&gt;</code> Incremented <code>val</code></p></details><h4 id="example-13"><a class="header-anchor" href="#example-13" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">inc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 101</span>\n<span class="token function">inc</span><span class="token punctuation">(</span><span class="token number">10n</span><span class="token punctuation">)</span> <span class="token comment">// 11n</span>\n</code></pre></div><hr><h3 id="isarray"><a class="header-anchor" href="#isarray" aria-hidden="true">#</a> isArray</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is <code>Array</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isArray</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Array.isArray(val)</code></p></details><h4 id="example-14"><a class="header-anchor" href="#example-14" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isbigint"><a class="header-anchor" href="#isbigint" aria-hidden="true">#</a> isBigint</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>bigint</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isBigint</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> bigint\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;bigint&#39;</code></p></details><h4 id="example-15"><a class="header-anchor" href="#example-15" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isBigint</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isBigint</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isboolean"><a class="header-anchor" href="#isboolean" aria-hidden="true">#</a> isBoolean</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>boolean</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isBoolean</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;boolean&#39;</code></p></details><h4 id="example-16"><a class="header-anchor" href="#example-16" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isempty"><a class="header-anchor" href="#isempty" aria-hidden="true">#</a> isEmpty</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Returns <code>true</code> if the given value is its type&#39;s empty value; otherwise <code>false</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isEmpty</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> Empty\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of empty or not</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of Empty - <code>&#39;&#39;</code> - <code>{}</code> - <code>[]</code></p></div><h4 id="example-17"><a class="header-anchor" href="#example-17" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isfunction"><a class="header-anchor" href="#isfunction" aria-hidden="true">#</a> isFunction</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>function</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isFunction</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> AnyFn<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;function&#39;</code></p></details><h4 id="example-18"><a class="header-anchor" href="#example-18" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isnan"><a class="header-anchor" href="#isnan" aria-hidden="true">#</a> isNaN</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is <code>NaN</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isNaN</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">number</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Number.isNaN(val)</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p><code>NaN</code> is primitive <code>number</code>.</p></div><h4 id="example-19"><a class="header-anchor" href="#example-19" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isnil"><a class="header-anchor" href="#isnil" aria-hidden="true">#</a> isNil</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>undefined</code> or <code>null</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isNil</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of type of <code>val</code> is <code>undefined</code> or <code>null</code></p></details><h4 id="example-20"><a class="header-anchor" href="#example-20" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isNil</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNil</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNil</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isnill"><a class="header-anchor" href="#isnill" aria-hidden="true">#</a> isNill</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p><span class="tag deprecated">deprecate</span></p><p class="desc">Whatever argument is type of <code>undefined</code> or <code>null</code>.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>This function will remove next major release.</p></div><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isNill</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of type of <code>val</code> is undefined or null</p></details><h4 id="example-21"><a class="header-anchor" href="#example-21" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isnull"><a class="header-anchor" href="#isnull" aria-hidden="true">#</a> isNull</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>null</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isNull</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token keyword">null</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val === null</code></p></details><h4 id="example-22"><a class="header-anchor" href="#example-22" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isnumber"><a class="header-anchor" href="#isnumber" aria-hidden="true">#</a> isNumber</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>number</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isNumber</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">number</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;number&#39;</code></p></details><h4 id="example-23"><a class="header-anchor" href="#example-23" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isobject"><a class="header-anchor" href="#isobject" aria-hidden="true">#</a> isObject</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>object</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>isObject<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token constant">T</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of object or not</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>Definition of Primitive - <code>string</code> - <code>number</code> - <code>bigint</code> - <code>boolean</code> - <code>symbol</code> - <code>undefined</code> - <code>null</code></p></div><h4 id="example-24"><a class="header-anchor" href="#example-24" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isObject</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isprimitive"><a class="header-anchor" href="#isprimitive" aria-hidden="true">#</a> isPrimitive</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is <code>primitive</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isPrimitive</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> Primitive\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of primitive or not</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>Definition of Primitive - <code>string</code> - <code>number</code> - <code>bigint</code> - <code>boolean</code> - <code>symbol</code> - <code>undefined</code> - <code>null</code></p></div><h4 id="example-25"><a class="header-anchor" href="#example-25" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isstring"><a class="header-anchor" href="#isstring" aria-hidden="true">#</a> isString</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>string</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isString</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">string</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;string&#39;</code></p></details><h4 id="example-26"><a class="header-anchor" href="#example-26" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isString</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="issymbol"><a class="header-anchor" href="#issymbol" aria-hidden="true">#</a> isSymbol</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>symbol</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isSymbol</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token builtin">symbol</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;symbol&#39;</code></p></details><h4 id="example-27"><a class="header-anchor" href="#example-27" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="isundefined"><a class="header-anchor" href="#isundefined" aria-hidden="true">#</a> isUndefined</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Whatever argument is type of <code>undefined</code> or not.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token function-variable function">isUndefined</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val <span class="token keyword">is</span> <span class="token keyword">undefined</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>typeof val === &#39;undefined&#39;</code></p></details><h4 id="example-28"><a class="header-anchor" href="#example-28" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="k"><a class="header-anchor" href="#k" aria-hidden="true">#</a> K</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">K combinator. Returns a function that always returns the given value.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token constant">K</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>The value to wrap in a function</td></tr></tbody></table><p><code class="returns">=&gt;</code> Function wrapped <code>val</code></p></details><h4 id="example-29"><a class="header-anchor" href="#example-29" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token constant">K</span><span class="token punctuation">(</span><span class="token string">&#39;k&#39;</span><span class="token punctuation">)</span>\n<span class="token function">k</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;k&#39;</span>\n</code></pre></div><hr><h3 id="keys"><a class="header-anchor" href="#keys" aria-hidden="true">#</a> keys</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#values">values</a>Â  <a href="#entries">entries</a>Â </p><p class="desc">Returns the names of the enumerable string properties and methods of an object.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>keys$<span class="token number">0</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyKey</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>Object</code> that contains the properties and methods</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Object.keys(val)</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The order of the output array is not guaranteed to be consistent across different JS platforms.</p></div><h4 id="example-30"><a class="header-anchor" href="#example-30" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;a&#39;</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;a&#39;]</span>\n<span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;0&#39;, &#39;1&#39;]</span>\n</code></pre></div><hr><h3 id="last"><a class="header-anchor" href="#last" aria-hidden="true">#</a> last</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#first">first</a>Â </p><p class="desc">Returns the last element of the given list or string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>last<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Last<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>string</code> or any <code>array</code> object</td></tr></tbody></table><p><code class="returns">=&gt;</code> The last element of the <code>val</code></p></details><h4 id="example-1-10"><a class="header-anchor" href="#example-1-10" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;o&#39;</span>\n</code></pre></div><h4 id="example-2-10"><a class="header-anchor" href="#example-2-10" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Array</span>\n<span class="token function">last</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;world&#39;</span>\n<span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>\n</code></pre></div><hr><h3 id="length"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Returns the number of elements in the array or string length.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>length<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&quot;length&quot;</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>string</code> or any <code>array</code></td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.length</code></p></details><h4 id="example-31"><a class="header-anchor" href="#example-31" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">length</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>\n<span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n</code></pre></div><hr><h3 id="lowercase"><a class="header-anchor" href="#lowercase" aria-hidden="true">#</a> lowerCase</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#uppercase">upperCase</a>Â </p><p class="desc">Return lowercase string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>lowerCase<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Lowercase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input string value</td></tr></tbody></table><p><code class="returns">=&gt;</code> Lowercase string</p></details><h4 id="example-32"><a class="header-anchor" href="#example-32" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">toLower</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// hello</span>\n</code></pre></div><hr><h3 id="lt"><a class="header-anchor" href="#lt" aria-hidden="true">#</a> lt</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#lte">lte</a>Â  <a href="#gt">gt</a>Â  <a href="#gte">gte</a>Â </p><p class="desc">Returns <code>true</code> if the first argument is less than the second; otherwise <code>false</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>lt<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ord</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input value</td></tr><tr><td><code>b</code></td><td>The second input value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a &lt; b</code></p></details><h4 id="example-1-11"><a class="header-anchor" href="#example-1-11" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-11"><a class="header-anchor" href="#example-2-11" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-3-5"><a class="header-anchor" href="#example-3-5" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-4-5"><a class="header-anchor" href="#example-4-5" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Boolean</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-5-4"><a class="header-anchor" href="#example-5-4" aria-hidden="true">#</a> Example 5</h4><div class="language-ts"><pre><code><span class="token comment">// Date</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1999/12/31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">lt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="lte"><a class="header-anchor" href="#lte" aria-hidden="true">#</a> lte</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#lt">lt</a>Â  <a href="#gt">gt</a>Â  <a href="#gte">gte</a>Â </p><p class="desc">Returns <code>true</code> if the first argument is less than or equal to the second; otherwise <code>false</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>lte<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Ord</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input value</td></tr><tr><td><code>b</code></td><td>The second input value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a &lt;= b</code></p></details><h4 id="example-1-12"><a class="header-anchor" href="#example-1-12" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-12"><a class="header-anchor" href="#example-2-12" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><h4 id="example-3-6"><a class="header-anchor" href="#example-3-6" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token string">&#39;z&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-4-6"><a class="header-anchor" href="#example-4-6" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Boolean</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-5-5"><a class="header-anchor" href="#example-5-5" aria-hidden="true">#</a> Example 5</h4><div class="language-ts"><pre><code><span class="token comment">// Date</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1999/12/31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">lte</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2000/1/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="map"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p><span class="tag beta">beta</span></p><p class="desc">Takes a function, applies the function to each, and returns a result of the same shape.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This API is provided as a preview for developers and may change based on feedback that we receive. Do not use this API in a production environment.</p></div><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>map<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> MapArray<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>k<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prop<span class="token operator">:</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> MapObject<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>fn</code></td><td>The function to be called on every element of the input list.</td></tr><tr><td><code>list</code></td><td>The list to be iterated over.</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>list.map(fn)</code> or object applied function to value</p></details><h4 id="example-33"><a class="header-anchor" href="#example-33" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token keyword">const</span> triple <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=&gt;</span> val <span class="token operator">*</span> <span class="token number">3</span>\n<span class="token function">map</span><span class="token punctuation">(</span>triple<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [3, 6, 9]</span>\n<span class="token function">map</span><span class="token punctuation">(</span>triple<span class="token punctuation">,</span> <span class="token punctuation">{</span> tom<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> john<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> bob<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// { tom: 3, john: 6, bob: 9}</span>\n</code></pre></div><hr><h3 id="multiply"><a class="header-anchor" href="#multiply" aria-hidden="true">#</a> multiply</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#add">add</a>Â  <a href="#subtract">subtract</a>Â  <a href="#divide">divide</a>Â </p><p class="desc">Multiplies first argument and second argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>multiply<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input number</td></tr><tr><td><code>b</code></td><td>The second input number</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a * b</code></p></details><h4 id="example-1-13"><a class="header-anchor" href="#example-1-13" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Basic</span>\n<span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>\n</code></pre></div><h4 id="example-2-13"><a class="header-anchor" href="#example-2-13" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">3n</span><span class="token punctuation">)</span> <span class="token comment">// 6n</span>\n</code></pre></div><h4 id="example-3-7"><a class="header-anchor" href="#example-3-7" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// Curry</span>\n<span class="token keyword">const</span> double <span class="token operator">=</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token function">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 8</span>\n</code></pre></div><hr><h3 id="not"><a class="header-anchor" href="#not" aria-hidden="true">#</a> not</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Returns the <code>!</code> of its argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>not<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>!val</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The Definition of Falsy - <code>&#39;&#39;</code> - <code>false</code> - <code>0</code> - <code>NaN</code> - <code>undefined</code> - <code>null</code></p></div><h4 id="example-34"><a class="header-anchor" href="#example-34" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="or"><a class="header-anchor" href="#or" aria-hidden="true">#</a> or</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#and">and</a>Â  <a href="#xor">xor</a>Â </p><p class="desc">Returns true if one or both of its arguments are true; otherwise false.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>or<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input any value</td></tr><tr><td><code>b</code></td><td>The second input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>!!a || !!bb</code></p></details><h4 id="example-35"><a class="header-anchor" href="#example-35" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">or</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h3 id="prepend"><a class="header-anchor" href="#prepend" aria-hidden="true">#</a> prepend</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#append">append</a>Â </p><p class="desc">Returns a new list with the given value at the front, followed by the contents of the list.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>prepend<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>The value to add to the front of the new list</td></tr><tr><td><code>list</code></td><td>The list of elements to add a new item to</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>[val, ...list]</code></p></details><h4 id="example-36"><a class="header-anchor" href="#example-36" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;Tom&#39;, &#39;hello&#39;]</span>\n<span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;Tom&#39;]</span>\n<span class="token function">prepend</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[&#39;Tom&#39;], &#39;hello&#39;, &#39;world&#39;]</span>\n</code></pre></div><hr><h3 id="product"><a class="header-anchor" href="#product" aria-hidden="true">#</a> product</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Multiplies together all the elements of a list.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>product<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> bigint<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>list An array of numbers</td></tr></tbody></table><p><code class="returns">=&gt;</code> The product of all the numbers in the list</p></details><h4 id="example-37"><a class="header-anchor" href="#example-37" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 120</span>\n<span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">3n</span><span class="token punctuation">,</span> <span class="token number">4n</span><span class="token punctuation">,</span> <span class="token number">5n</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//120n</span>\n<span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre></div><hr><h3 id="props"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#has">has</a>Â </p><p class="desc">Returns a function that when supplied an object returns the indicated property of that object, if it exists.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>props<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> obj<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input property key</td></tr><tr><td><code>obj</code></td><td>The object to query</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of safety <code>obj[val]</code> or <code>obj[val[0]][val[1]][val[...x]]</code></p></details><h4 id="example-38"><a class="header-anchor" href="#example-38" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">props</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n<span class="token function">props</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 100</span>\n<span class="token function">props</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre></div><hr><h3 id="replace"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> replace</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#replaceall">replaceAll</a>Â </p><p class="desc">Replaces matches for <code>from</code> in string with <code>to</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>replace<span class="token operator">:</span> <span class="token operator">&lt;</span>From <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> To <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token operator">:</span> From<span class="token punctuation">,</span> to<span class="token operator">:</span> To<span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Replace<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>from</code></td><td>Holds the pattern string that need to replace</td></tr><tr><td><code>to</code></td><td>Holds the replacement string</td></tr><tr><td><code>val</code></td><td>Original string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.replace(from, to)</code></p></details><h4 id="example-39"><a class="header-anchor" href="#example-39" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;hello Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello Bob&#39;</span>\n<span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;hogehoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fuga&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;fugahoge&#39;</span>\n</code></pre></div><hr><h3 id="replaceall"><a class="header-anchor" href="#replaceall" aria-hidden="true">#</a> replaceAll</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#replace">replace</a>Â </p><p class="desc">Replaces all matches for <code>from</code> in string with <code>to</code>.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>replaceAll<span class="token operator">:</span> <span class="token operator">&lt;</span>From <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> To <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token operator">:</span> From<span class="token punctuation">,</span> to<span class="token operator">:</span> To<span class="token punctuation">,</span> val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ReplaceAll<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>from</code></td><td>Holds the pattern string that need to replace</td></tr><tr><td><code>to</code></td><td>Holds the replacement string</td></tr><tr><td><code>val</code></td><td>Original string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.replaceAll(from, to)</code></p></details><h4 id="example-40"><a class="header-anchor" href="#example-40" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;hello Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello Bob&#39;</span>\n<span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;hogehoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fuga&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;fugafuga&#39;</span>\n</code></pre></div><hr><h3 id="reverse"><a class="header-anchor" href="#reverse" aria-hidden="true">#</a> reverse</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Returns a new list or string with the elements or characters in reverse order.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>reverse<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>list or string characters</td></tr></tbody></table><p><code class="returns">=&gt;</code> New list or string characters in reverse order</p></details><h4 id="example-1-14"><a class="header-anchor" href="#example-1-14" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;olleh&#39;</span>\n</code></pre></div><h4 id="example-2-14"><a class="header-anchor" href="#example-2-14" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Any Array</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;world&#39;, &#39;new&#39;, &#39;hello&#39;]</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[], {}, 0]</span>\n</code></pre></div><hr><h3 id="startswith"><a class="header-anchor" href="#startswith" aria-hidden="true">#</a> startsWith</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#endswith">endsWith</a>Â </p><p class="desc">Checks if a string starts with the provided substring.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>startsWith<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> target<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">U</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> StringWith<span class="token operator">&lt;</span><span class="token string">&quot;startsWith&quot;</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>search string</td></tr><tr><td><code>target</code></td><td>target string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>target.startsWith(val)</code></p></details><h4 id="example-1-15"><a class="header-anchor" href="#example-1-15" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Basic</span>\n<span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><h4 id="example-2-15"><a class="header-anchor" href="#example-2-15" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Curry</span>\n<span class="token keyword">const</span> startWithSlash <span class="token operator">=</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n<span class="token function">startWithSlash</span><span class="token punctuation">(</span><span class="token string">&#39;/path/to&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><hr><h3 id="subtract"><a class="header-anchor" href="#subtract" aria-hidden="true">#</a> subtract</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#add">add</a>Â  <a href="#multiply">multiply</a>Â  <a href="#divide">divide</a>Â </p><p class="desc">Subtracts its second argument from its first argument.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>subtract<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">typeof</span> _<span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token keyword">typeof</span> _<span class="token punctuation">,</span> b<span class="token operator">:</span> bigint<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> bigint<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input number</td></tr><tr><td><code>b</code></td><td>The second input number</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>a - b</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>Since subtraction is not idempotent, there are two ways to curry.</p></div><h4 id="example-1-16"><a class="header-anchor" href="#example-1-16" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Number</span>\n<span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre></div><h4 id="example-2-16"><a class="header-anchor" href="#example-2-16" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Bigint</span>\n<span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">3n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">)</span> <span class="token comment">//1n</span>\n</code></pre></div><h4 id="example-3-8"><a class="header-anchor" href="#example-3-8" aria-hidden="true">#</a> Example 3</h4><div class="language-ts"><pre><code><span class="token comment">// First argument curry</span>\n<span class="token keyword">const</span> from5Minus <span class="token operator">=</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token function">from5Minus</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// -5</span>\n</code></pre></div><h4 id="example-4-7"><a class="header-anchor" href="#example-4-7" aria-hidden="true">#</a> Example 4</h4><div class="language-ts"><pre><code><span class="token comment">// Second argument curry</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> _ <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fonction&#39;</span>\n<span class="token keyword">const</span> minus5 <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token function">minus5</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 15</span>\n</code></pre></div><hr><h3 id="sum"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> sum</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Adds together all the elements of a list.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>sum<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> bigint<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> bigint<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>list An array of numbers</td></tr></tbody></table><p><code class="returns">=&gt;</code> The sum of all the numbers in the list</p></details><h4 id="example-41"><a class="header-anchor" href="#example-41" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 15</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">2n</span><span class="token punctuation">,</span> <span class="token number">3n</span><span class="token punctuation">,</span> <span class="token number">4n</span><span class="token punctuation">,</span> <span class="token number">5n</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 15n</span>\n<span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n</code></pre></div><hr><h3 id="t"><a class="header-anchor" href="#t" aria-hidden="true">#</a> T</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#f">F</a>Â </p><p class="desc">A function that always returns <code>true</code>. Any passed in parameters are ignored.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token constant">T</span><span class="token operator">:</span> AnyFn<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> <code>True</code></p></details><h4 id="example-42"><a class="header-anchor" href="#example-42" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token constant">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token constant">T</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre></div><hr><h3 id="tail"><a class="header-anchor" href="#tail" aria-hidden="true">#</a> tail</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#head">head</a>Â </p><p class="desc">Returns all but the first element of the given list or string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>tail<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>string or any array object</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.slice(1, Infinity)</code></p></details><h4 id="example-1-17"><a class="header-anchor" href="#example-1-17" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ello&#39;</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>\n</code></pre></div><h4 id="example-2-17"><a class="header-anchor" href="#example-2-17" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3]</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;world&#39;]</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">tail</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n</code></pre></div><hr><h3 id="trim"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimleft">trimLeft</a>Â  <a href="#trimright">trimRight</a>Â </p><p class="desc">Removes whitespace from both ends of the string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>trim<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TrimLeft<span class="token operator">&lt;</span>TrimRight<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>string</code> to trim</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.trim()</code></p></details><h4 id="example-43"><a class="header-anchor" href="#example-43" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">&#39;   hello   &#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><h3 id="trimleft"><a class="header-anchor" href="#trimleft" aria-hidden="true">#</a> trimLeft</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimright">trimRight</a>Â  <a href="#trim">trim</a>Â </p><p class="desc">Removes space from left ends of the string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>trimLeft<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>input string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.trimLeft()</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of space - <code>&#39;&#39;</code> - <code>\\n</code> - <code>\\t</code></p></div><h4 id="example-44"><a class="header-anchor" href="#example-44" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token string">&#39;   hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n<span class="token function">trimLeft</span><span class="token punctuation">(</span><span class="token string">&#39; \\n\\thello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><h3 id="trimright"><a class="header-anchor" href="#trimright" aria-hidden="true">#</a> trimRight</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimleft">trimLeft</a>Â  <a href="#trim">trim</a>Â </p><p class="desc">Removes space from right ends of the string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>trimRight<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>input string</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>val.trimRight()</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of space - <code>&#39;&#39;</code> - <code>\\n</code> - <code>\\t</code></p></div><h4 id="example-45"><a class="header-anchor" href="#example-45" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token string">&#39;hello   &#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n<span class="token function">trimRight</span><span class="token punctuation">(</span><span class="token string">&#39;hello \\n\\t&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><h3 id="uppercase"><a class="header-anchor" href="#uppercase" aria-hidden="true">#</a> upperCase</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#lowercase">lowerCase</a>Â </p><p class="desc">Return uppercase string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>upperCase<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Uppercase<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td>Input string value</td></tr></tbody></table><p><code class="returns">=&gt;</code> Uppercase string</p></details><h4 id="example-46"><a class="header-anchor" href="#example-46" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">toUpper</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// HELLO</span>\n</code></pre></div><hr><h3 id="values"><a class="header-anchor" href="#values" aria-hidden="true">#</a> values</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#keys">keys</a>Â  <a href="#entries">entries</a>Â </p><p class="desc">Returns an array of values of the enumerable properties of an object.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>values$<span class="token number">0</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> Record<span class="token operator">&lt;</span>PropertyKey<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> ArrayLike<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>Object</code> that contains the properties and methods</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>Object.values(val)</code></p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The order of the output array is not guaranteed to be consistent across different platforms.</p></div><h4 id="example-1-18"><a class="header-anchor" href="#example-1-18" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// Object</span>\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;a&#39;</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;b&#39;]</span>\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;, &#39;world&#39;]</span>\n</code></pre></div><h4 id="example-2-18"><a class="header-anchor" href="#example-2-18" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Array</span>\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// []</span>\n<span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;hello&#39;, &#39;world&#39;]</span>\n</code></pre></div><hr><h3 id="xor"><a class="header-anchor" href="#xor" aria-hidden="true">#</a> xor</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#and">and</a>Â  <a href="#or">or</a>Â </p><p class="desc">Returns true if one of the arguments is truthy and the other is falsy; otherwise false.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code>xor<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name">Falsy</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">:</span> <span class="token builtin">boolean</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><table class="table"><thead><tr><th>Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>a</code></td><td>The first input any value</td></tr><tr><td><code>b</code></td><td>The second input any value</td></tr></tbody></table><p><code class="returns">=&gt;</code> The result of <code>!a !== !b</code></p></details><h4 id="example-47"><a class="header-anchor" href="#example-47" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code><span class="token function">xor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">xor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token function">xor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n<span class="token function">xor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><hr><h2 id="types"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h2><h3 id="anyfn"><a class="header-anchor" href="#anyfn" aria-hidden="true">#</a> AnyFn</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Type of any function.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">AnyFn<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">U</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="empty"><a class="header-anchor" href="#empty" aria-hidden="true">#</a> Empty</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Alias for Empty values</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Empty</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">|</span> <span class="token punctuation">[</span>\n<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="falsy"><a class="header-anchor" href="#falsy" aria-hidden="true">#</a> Falsy</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Alias for Falsy values.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Falsy</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token string">&quot;&quot;</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="first-2"><a class="header-anchor" href="#first-2" aria-hidden="true">#</a> First</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#last">Last</a>Â </p><p class="desc">Infer the first types.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> String2Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>\n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> String2Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>\n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> First element of the <code>T</code></p></details><h4 id="example-1-19"><a class="header-anchor" href="#example-1-19" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\nFirst<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// string</span>\nFirst<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;&#39;</span>\nFirst<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;h&#39;</span>\n</code></pre></div><h4 id="example-2-19"><a class="header-anchor" href="#example-2-19" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Array</span>\nFirst<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// undefined</span>\nFirst<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span>\nFirst<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// string | number</span>\n</code></pre></div><hr><h3 id="flattendeep-2"><a class="header-anchor" href="#flattendeep-2" aria-hidden="true">#</a> FlattenDeep</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Infer deep flatted array.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">FlattenDeep<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token punctuation">[</span>\n    infer <span class="token constant">A</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>infer Rest\n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span>FlattenDeep<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>FlattenDeep<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span>\n<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token constant">A</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>FlattenDeep<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span>\n<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token constant">T</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> Deep flatted array</p></details><h4 id="example-48"><a class="header-anchor" href="#example-48" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>FlattenDeep<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// []</span>\nFlattenDeep<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span>\n</code></pre></div><hr><h3 id="last-2"><a class="header-anchor" href="#last-2" aria-hidden="true">#</a> Last</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#first">First</a>Â </p><p class="desc">Infer the last types.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> String2Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>\n<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token builtin">never</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>String2Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">]</span><span class="token punctuation">[</span>String2Array<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&quot;length&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">[</span>\n    <span class="token builtin">never</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span><span class="token constant">T</span>\n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&quot;length&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="example-1-20"><a class="header-anchor" href="#example-1-20" aria-hidden="true">#</a> Example 1</h4><div class="language-ts"><pre><code><span class="token comment">// String</span>\nLast<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// string</span>\nLast<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;&#39;</span>\nLast<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;o&#39;</span>\n</code></pre></div><h4 id="example-2-20"><a class="header-anchor" href="#example-2-20" aria-hidden="true">#</a> Example 2</h4><div class="language-ts"><pre><code><span class="token comment">// Array</span>\nLast<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">readonly</span> <span class="token builtin">never</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// undefined</span>\nLast<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;world&#39;</span>\nLast<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// string | number</span>\n</code></pre></div><hr><h3 id="ord"><a class="header-anchor" href="#ord" aria-hidden="true">#</a> Ord</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Abbreviation for Ordinal.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Ord</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> Date<span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="primitive"><a class="header-anchor" href="#primitive" aria-hidden="true">#</a> Primitive</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Alias for Primitive values types.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Primitive</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> bigint <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="replace-2"><a class="header-anchor" href="#replace-2" aria-hidden="true">#</a> Replace</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#replaceall">ReplaceAll</a>Â </p><p class="desc">Infer the replacement value.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> To <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> From <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span> <span class="token operator">|</span> To <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>From<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>To<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="example-49"><a class="header-anchor" href="#example-49" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>Replace<span class="token operator">&lt;</span><span class="token string">&#39;hello Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello Bob&#39;</span>\nReplace<span class="token operator">&lt;</span><span class="token string">&#39;hogehoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fuga&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;fugahoge&#39;</span>\n</code></pre></div><hr><h3 id="replaceall-2"><a class="header-anchor" href="#replaceall-2" aria-hidden="true">#</a> ReplaceAll</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#replace">Replace</a>Â </p><p class="desc">Infer the all replacement value.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> From <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> To <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> From <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span> <span class="token operator">|</span> To <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>From<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ReplaceAll<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>To<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n</code></pre></div><h4 id="example-50"><a class="header-anchor" href="#example-50" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;hello Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello Bob&#39;</span>\nReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;hogehoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hoge&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fuga&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;fugafuga&#39;</span>\n</code></pre></div><hr><h3 id="space"><a class="header-anchor" href="#space" aria-hidden="true">#</a> Space</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p class="desc">Alias for Space values.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Space</span> <span class="token operator">=</span> <span class="token string">&quot; &quot;</span> <span class="token operator">|</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;\\t&quot;</span><span class="token punctuation">;</span>\n</code></pre></div><hr><h3 id="trim-2"><a class="header-anchor" href="#trim-2" aria-hidden="true">#</a> Trim</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimleft">TrimLeft</a>Â  <a href="#trimright">TrimRight</a>Â </p><p class="desc">Infer the trimmed string.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span>TrimRight<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> Trimmed string</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of space - <code>&#39;&#39;</code> - <code>\\n</code> - <code>\\t</code></p></div><h4 id="example-51"><a class="header-anchor" href="#example-51" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>Trim<span class="token operator">&lt;</span><span class="token string">&#39;\\t\\n hello \\t\\n&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><h3 id="trimleft-2"><a class="header-anchor" href="#trimleft-2" aria-hidden="true">#</a> TrimLeft</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimright">TrimRight</a>Â  <a href="#trim">Trim</a>Â </p><p class="desc">Infer the string with the left ends of trimmed.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> String left ends of trimmed</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of space - <code>&#39;&#39;</code> - <code>\\n</code> - <code>\\t</code></p></div><h4 id="example-52"><a class="header-anchor" href="#example-52" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>TrimLeft<span class="token operator">&lt;</span><span class="token string">&#39; \\n\\thello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><h3 id="trimright-2"><a class="header-anchor" href="#trimright-2" aria-hidden="true">#</a> TrimRight</h3><p class="my-1"><small>Added from <a href="./../1.6.0/">1.6.0</a></small></p><p>ðŸ”—Â  <a href="#trimleft">TrimLeft</a>Â  <a href="#trim">Trim</a>Â </p><p class="desc">Infer the string with the right ends of trimmed.</p><p><strong>Signature:</strong></p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n</code></pre></div><details class="parameters-detail"><summary>Parameters</summary><p><code class="returns">=&gt;</code> String right ends of trimmed</p></details><div class="tip custom-block"><p class="custom-block-title">Remark</p><p>The definition of space - <code>&#39;&#39;</code> - <code>\\n</code> - <code>\\t</code></p></div><h4 id="example-53"><a class="header-anchor" href="#example-53" aria-hidden="true">#</a> Example</h4><div class="language-ts"><pre><code>TrimRight<span class="token operator">&lt;</span><span class="token string">&#39;hello \\n\\t&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span>\n</code></pre></div><hr><span class="tag version past fixed bottom-14 right-14"> 1.6.0-beta.3 </span>',823);e.render=function(a,t,e,o,c,l){return s(),n("div",null,[p])};export default e;export{t as __pageData};
