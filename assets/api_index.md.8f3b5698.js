import{o as t,c as e,a as r,b as a}from"./app.77d74c8b.js";const d='{"title":"fonction package","description":"","frontmatter":{},"headers":[{"level":2,"title":"fonction package","slug":"fonction-package"},{"level":2,"title":"Variables","slug":"variables"},{"level":2,"title":"Type Aliases","slug":"type-aliases"}],"relativePath":"api/index.md","lastUpdated":1618671423440}',i={},s=a('<h2 id="fonction-package"><a class="header-anchor" href="#fonction-package" aria-hidden="true">#</a> fonction package</h2><h2 id="variables"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./add/">add</a></td><td>Adds first argument and second argument.</td></tr><tr><td><a href="./divide/">divide</a></td><td>Divide input two arguments.</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td>Checks if a string ends with the provided substring.</td></tr><tr><td><a href="./first/">first</a></td><td>Returns the first element of the given list or string.</td></tr><tr><td><a href="./isbigint/">isBigint</a></td><td>Whatever argument is type of bigint or not.</td></tr><tr><td><a href="./isboolean/">isBoolean</a></td><td>Whatever argument is type of boolean or not.</td></tr><tr><td><a href="./isfunction/">isFunction</a></td><td>Whatever argument is type of function or not.</td></tr><tr><td><a href="./isnill/">isNill</a></td><td>Whatever argument is type of undefined or null.</td></tr><tr><td><a href="./isnull/">isNull</a></td><td>Whatever argument is type of null or not.</td></tr><tr><td><a href="./isnumber/">isNumber</a></td><td>Whatever argument is type of number or not.</td></tr><tr><td><a href="./isobject/">isObject</a></td><td>Whatever argument is type of object or not.</td></tr><tr><td><a href="./isprimitive/">isPrimitive</a></td><td>Whatever argument is primitive or not.</td></tr><tr><td><a href="./isstring/">isString</a></td><td>Whatever argument is type of string or not.</td></tr><tr><td><a href="./issymbol/">isSymbol</a></td><td>Whatever argument is type of symbol or not.</td></tr><tr><td><a href="./isundefined/">isUndefined</a></td><td>Whatever argument is type of undefined or not.</td></tr><tr><td><a href="./last/">last</a></td><td>Returns the last element of the given list or string.</td></tr><tr><td><a href="./lowercase/">lowerCase</a></td><td>Return lowercase string</td></tr><tr><td><a href="./multiply/">multiply</a></td><td>Multiplies first argument and second argument.</td></tr><tr><td><a href="./reverse/">reverse</a></td><td>Returns a new list or string with the elements or characters in reverse order.</td></tr><tr><td><a href="./startswith/">startsWith</a></td><td>Checks if a string starts with the provided substring.</td></tr><tr><td><a href="./subtract/">subtract</a></td><td>Subtracts second argument from first argument.</td></tr><tr><td><a href="./sum/">sum</a></td><td>Adds together all the elements of a list.</td></tr><tr><td><a href="./uppercase/">upperCase</a></td><td>Return uppercase string</td></tr></tbody></table><h2 id="type-aliases"><a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a> Type Aliases</h2><table><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./anyfn/">AnyFn</a></td><td>Type of any function</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td></td></tr><tr><td><a href="./primitive/">Primitive</a></td><td>Alias for Primitive values types</td></tr></tbody></table>',5);i.render=function(a,d,i,n,o,h){return t(),e("div",null,[r(" Do not edit this file. It is automatically generated by API Documenter. "),s])};export default i;export{d as __pageData};
