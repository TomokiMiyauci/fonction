import{o as t,c as e,a as r,b as d}from"./app.77d74c8b.js";const a='{"title":"fonction package","description":"","frontmatter":{},"headers":[{"level":2,"title":"fonction package","slug":"fonction-package"},{"level":2,"title":"Variables","slug":"variables"},{"level":2,"title":"Type Aliases","slug":"type-aliases"}],"relativePath":"api/index.md","lastUpdated":1618797912879}',i={},s=d('<h2 id="fonction-package"><a class="header-anchor" href="#fonction-package" aria-hidden="true">#</a> fonction package</h2><h2 id="variables"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./add/">add</a></td><td>Adds first argument and second argument.</td></tr><tr><td><a href="./and/">and</a></td><td>Returns true if both arguments are true; otherwise false.</td></tr><tr><td><a href="./dec/">dec</a></td><td>Decrements its argument.</td></tr><tr><td><a href="./divide/">divide</a></td><td>Divide its second argument from its first argument.</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td>Checks if a string ends with the provided substring.</td></tr><tr><td><a href="./f/">F</a></td><td>A function that always returns <code>false</code>. Any passed in parameters are ignored.</td></tr><tr><td><a href="./first/">first</a></td><td>Returns the first element of the given list or string.</td></tr><tr><td><a href="./gt/">gt</a></td><td>Returns <code>true</code> if the first argument is greater than the second; otherwise <code>false</code></td></tr><tr><td><a href="./gte/">gte</a></td><td>Returns <code>true</code> if the first argument is greater than or equal to the second; otherwise <code>false</code></td></tr><tr><td><a href="./inc/">inc</a></td><td>Increments its argument.</td></tr><tr><td><a href="./isbigint/">isBigint</a></td><td>Whatever argument is type of <code>bigint</code> or not.</td></tr><tr><td><a href="./isboolean/">isBoolean</a></td><td>Whatever argument is type of <code>boolean</code> or not.</td></tr><tr><td><a href="./isfunction/">isFunction</a></td><td>Whatever argument is type of <code>function</code> or not.</td></tr><tr><td><a href="./isnill/">isNill</a></td><td>Whatever argument is type of <code>undefined</code> or <code>null</code>.</td></tr><tr><td><a href="./isnull/">isNull</a></td><td>Whatever argument is type of <code>null</code> or not.</td></tr><tr><td><a href="./isnumber/">isNumber</a></td><td>Whatever argument is type of <code>number</code> or not.</td></tr><tr><td><a href="./isobject/">isObject</a></td><td>Whatever argument is type of <code>object</code> or not.</td></tr><tr><td><a href="./isprimitive/">isPrimitive</a></td><td>Whatever argument is <code>primitive</code> or not.</td></tr><tr><td><a href="./isstring/">isString</a></td><td>Whatever argument is type of <code>string</code> or not.</td></tr><tr><td><a href="./issymbol/">isSymbol</a></td><td>Whatever argument is type of <code>symbol</code> or not.</td></tr><tr><td><a href="./isundefined/">isUndefined</a></td><td>Whatever argument is type of <code>undefined</code> or not.</td></tr><tr><td><a href="./k/">K</a></td><td>K combinator. Returns a function that always returns the given value.</td></tr><tr><td><a href="./last/">last</a></td><td>Returns the last element of the given list or string.</td></tr><tr><td><a href="./lowercase/">lowerCase</a></td><td>Return lowercase string</td></tr><tr><td><a href="./lt/">lt</a></td><td>Returns <code>true</code> if the first argument is less than the second; otherwise <code>false</code></td></tr><tr><td><a href="./lte/">lte</a></td><td>Returns <code>true</code> if the first argument is less than or equal to the second; otherwise <code>false</code></td></tr><tr><td><a href="./multiply/">multiply</a></td><td>Multiplies first argument and second argument.</td></tr><tr><td><a href="./or/">or</a></td><td>Returns true if one or both of its arguments are true; otherwise false.</td></tr><tr><td><a href="./reverse/">reverse</a></td><td>Returns a new list or string with the elements or characters in reverse order.</td></tr><tr><td><a href="./startswith/">startsWith</a></td><td>Checks if a string starts with the provided substring.</td></tr><tr><td><a href="./subtract/">subtract</a></td><td>Subtracts its second argument from its first argument.</td></tr><tr><td><a href="./sum/">sum</a></td><td>Adds together all the elements of a list.</td></tr><tr><td><a href="./t/">T</a></td><td>A function that always returns <code>true</code>. Any passed in parameters are ignored.</td></tr><tr><td><a href="./trim/">trim</a></td><td>Removes (strips) whitespace from both ends of the string.</td></tr><tr><td><a href="./uppercase/">upperCase</a></td><td>Return uppercase string</td></tr><tr><td><a href="./xor/">xor</a></td><td>Returns true if one of the arguments is truthy and the other is falsy; otherwise false.</td></tr></tbody></table><h2 id="type-aliases"><a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a> Type Aliases</h2><table><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./anyfn/">AnyFn</a></td><td>Type of any function</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td></td></tr><tr><td><a href="./ord/">Ord</a></td><td>Abbreviation for Ordinal</td></tr><tr><td><a href="./primitive/">Primitive</a></td><td>Alias for Primitive values types</td></tr></tbody></table>',5);i.render=function(d,a,i,o,n,h){return t(),e("div",null,[r(" Do not edit this file. It is automatically generated by API Documenter. "),s])};export default i;export{a as __pageData};
