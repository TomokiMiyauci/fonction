import{o as t,c as i,a as r,b as e}from"./app.77d74c8b.js";const d='{"title":"fonction package","description":"","frontmatter":{},"headers":[{"level":2,"title":"fonction package","slug":"fonction-package"},{"level":2,"title":"Variables","slug":"variables"},{"level":2,"title":"Type Aliases","slug":"type-aliases"}],"relativePath":"api/index.md","lastUpdated":1618662547917}',a={},n=e('<h2 id="fonction-package"><a class="header-anchor" href="#fonction-package" aria-hidden="true">#</a> fonction package</h2><h2 id="variables"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./add/">add</a></td><td><b><i>(BETA)</i></b> Adds first argument and second argument.</td></tr><tr><td><a href="./divide/">divide</a></td><td><b><i>(BETA)</i></b> Divide input two arguments.</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td><b><i>(BETA)</i></b> Checks if a string ends with the provided substring.</td></tr><tr><td><a href="./first/">first</a></td><td><b><i>(BETA)</i></b> Returns the first element of the given list or string.</td></tr><tr><td><a href="./isbigint/">isBigint</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of bigint or not.</td></tr><tr><td><a href="./isboolean/">isBoolean</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of boolean or not.</td></tr><tr><td><a href="./isfunction/">isFunction</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of function or not.</td></tr><tr><td><a href="./isnill/">isNill</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of undefined or null.</td></tr><tr><td><a href="./isnull/">isNull</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of null or not.</td></tr><tr><td><a href="./isnumber/">isNumber</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of number or not.</td></tr><tr><td><a href="./isobject/">isObject</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of object or not.</td></tr><tr><td><a href="./isprimitive/">isPrimitive</a></td><td><b><i>(BETA)</i></b> Whatever argument is primitive or not.</td></tr><tr><td><a href="./isstring/">isString</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of string or not.</td></tr><tr><td><a href="./issymbol/">isSymbol</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of symbol or not.</td></tr><tr><td><a href="./isundefined/">isUndefined</a></td><td><b><i>(BETA)</i></b> Whatever argument is type of undefined or not.</td></tr><tr><td><a href="./last/">last</a></td><td><b><i>(BETA)</i></b> Returns the last element of the given list or string.</td></tr><tr><td><a href="./multiply/">multiply</a></td><td><b><i>(BETA)</i></b> Multiplies first argument and second argument.</td></tr><tr><td><a href="./startswith/">startsWith</a></td><td><b><i>(BETA)</i></b> Checks if a string starts with the provided substring.</td></tr><tr><td><a href="./subtract/">subtract</a></td><td><b><i>(BETA)</i></b> Subtracts second argument from first argument.</td></tr><tr><td><a href="./sum/">sum</a></td><td><b><i>(BETA)</i></b> Adds together all the elements of a list.</td></tr><tr><td><a href="./tolower/">toLower</a></td><td><b><i>(BETA)</i></b> Return lowercase string</td></tr><tr><td><a href="./toupper/">toUpper</a></td><td><b><i>(BETA)</i></b> Return uppercase string</td></tr></tbody></table><h2 id="type-aliases"><a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a> Type Aliases</h2><table><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./anyfn/">AnyFn</a></td><td><b><i>(BETA)</i></b> Type of any function</td></tr><tr><td><a href="./endswith/">endsWith</a></td><td></td></tr><tr><td><a href="./isbigint/">IsBigint</a></td><td><b><i>(BETA)</i></b> Bigint or not</td></tr><tr><td><a href="./isboolean/">IsBoolean</a></td><td><b><i>(BETA)</i></b> Boolean or not</td></tr><tr><td><a href="./isfunction/">IsFunction</a></td><td><b><i>(BETA)</i></b> Function or not</td></tr><tr><td><a href="./isnill/">IsNill</a></td><td><b><i>(BETA)</i></b> Undefiled or null, or not</td></tr><tr><td><a href="./isnull/">IsNull</a></td><td><b><i>(BETA)</i></b> Null or not</td></tr><tr><td><a href="./isnumber/">IsNumber</a></td><td><b><i>(BETA)</i></b> Number or not</td></tr><tr><td><a href="./isobject/">IsObject</a></td><td><b><i>(BETA)</i></b> Object or not</td></tr><tr><td><a href="./isprimitive/">IsPrimitive</a></td><td><b><i>(BETA)</i></b> Primitive or not</td></tr><tr><td><a href="./isstring/">IsString</a></td><td><b><i>(BETA)</i></b> String or not</td></tr><tr><td><a href="./issymbol/">IsSymbol</a></td><td><b><i>(BETA)</i></b> Symbol or not</td></tr><tr><td><a href="./isundefined/">IsUndefined</a></td><td><b><i>(BETA)</i></b> Undefined or not</td></tr><tr><td><a href="./primitive/">Primitive</a></td><td><b><i>(BETA)</i></b> Alias for Primitive values types</td></tr></tbody></table>',5);a.render=function(e,d,a,s,o,b){return t(),i("div",null,[r(" Do not edit this file. It is automatically generated by API Documenter. "),n])};export default a;export{d as __pageData};
