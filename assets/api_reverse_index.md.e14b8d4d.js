import{o as n,c as s,a,b as t}from"./app.b7061c95.js";const e='{"title":"reverse variable","description":"","frontmatter":{},"headers":[{"level":2,"title":"reverse variable","slug":"reverse-variable"},{"level":2,"title":"Example 1","slug":"example-1"},{"level":2,"title":"Example 2","slug":"example-2"}],"relativePath":"api/reverse/index.md","lastUpdated":1619609225112}',p={},o=t('<h2 id="reverse-variable"><a class="header-anchor" href="#reverse-variable" aria-hidden="true">#</a> reverse variable</h2><p>Returns a new list or string with the elements or characters in reverse order.</p><p><b>Signature:</b></p><div class="language-typescript"><pre><code>reverse<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="example-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example 1</h2><div class="language-ts"><pre><code><span class="token comment">// String</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;olleh&#39;</span>\n\n</code></pre></div><h2 id="example-2"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example 2</h2><div class="language-ts"><pre><code><span class="token comment">// Any Array</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;world&#39;, &#39;new&#39;, &#39;hello&#39;]</span>\n<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [[], {}, 0]</span>\n\n</code></pre></div>',8);p.render=function(t,e,p,c,l,r){return n(),s("div",null,[a(" Do not edit this file. It is automatically generated by API Documenter. "),o])};export default p;export{e as __pageData};
